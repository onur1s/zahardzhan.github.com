---
layout: post
title: Интегрированные среды и линукс на десктопе.
---

Последний срач в Google Buzz заставил меня задуматься и высказать
мысли насчёт консоли в современных никсах и о больших системах.

# GUI vs CLI vs Mouse vs Keyboard

Противопоставление разных подходов к интерфейсам и специализация
интерфейсов на определенных подходах не дает ничего хорошего. В UNIX
эта беда заметнее чем во многих других системах.

# Плиточные оконные менеджеры

Я перепробовал множество минималистичных *плиточных* оконных
менеджеров. Среди них были очень толковые, но ни один из них меня не
устроил: все они были слишком зациклены на клавиатуре — большинство из
них просто игнорировало мышь как таковую. Это глупость со стороны
авторов этих программ — от плиточных оконных менеджеров толку больше
всего в связке с мышью (см. [iPad](http://www.apple.com/ipad)), тем
более, что основная программа на десктопе современного пользователя —
браузер, целиком и полностью ориентирована на мышь.

В результате я использую гном. Он достаточно хорош для всего — просто
работает безо всяких замутов.

# Консоль

С консолью та же беда. Это может прозвучать глупо, вроде как консоль —
она на то и консоль, чтобы быть текстовой, и мышь тут не при делах. Но
нет — даже в консоли поддержка мыши очень важна. Трудно отказаться от
убойной фичи копирования выделением мыши и вставки по щелчку двумя
кнопками. В древней операционке Open Genera для лисп машин в консоли
была полная поддержка мыши, графики и гипертекста. Но это было больше
20-ти лет назад.

## Консоль и пользователь

Консоль в UNIX, в том виде в котором она есть сейчас мало того, что
практически бесполезна для пользователя (простого пользователя), в
большинстве случаев она просто вредна.

Я пользуюсь консолью в Убунту 10.04 в пяти случаях:

1. Запуск **mplayer** с субтитрами. Это долго и нудно, но smplayer
тормозной, а стандартный проигрыватель глючный.

2. Перезапуск глючного **pulseaudio**. Здесь даже и говорить нечего.

3. Установка софта через **apt**. Установка софта через консоль — это
очень удобно, тут уж ничего не скажешь.

4. Работа с **git**, **пакетными менеджерами**, **системами сборки**,
etc. Профессиональный программерский софт удобно использовать в
консоли, на то он и профессиональный.

5. Правки из-под sudo в труднодоступных местах. Это уже из области
техобслуживания, простой пользователь во внутренности системы не
полезет, а игры с sudo опасны. Неосторожный `rm -Rf /` или даный
добрым другом *скрипт для оптимизации системы* может иметь
очень нехорошие последствия.

В остальном — от консоли толку нет.

## UNIX way

А как же классический UNIX-way: скрипты, pipe'ы, и т.п.? Только если вы
сисадмин или упоротый сисадминистый пользователь, которому настолько
нечего делать, что он использует все эти навороченые классические
консольные инструменты (за пределами элементарных rm, mkdir, cp,
chmod, конечно — эти достаточно просты, чтобы быть полезными).

## Простой пример — почитать книжку

У меня есть книжка в формате PDF. Я хочу её почитать. Как я сделаю это
через интерфейс консоли и интерфейс гугла?

### Zsh

- Надо почитать книжку, для этого надо открыть её.
- Вот только я не помню где она лежит — надо найти её.
- Я читал в учебнике для **системных администраторов** что для этого
  используется команда `find`.
- Чтобы узнать (или вспомнить, потому что правила использования такого навороченого
  механизма полностью стираются из памяти после использования) надо
  прочесть мануал.
- Открываю терминал, набираю:

        #!bash
        man find

- Проходит 5 минут. Ох, ебать, как все сложно. открываем вторую
  консоль и уже в ней продолжаем.

        #!bash
        find -name "SICP*" -type f -exec evince
        find: отсутствует аргумент у `-exec' 

  Результат нулевой — команда набрана неправильно. (Ах, да,
  пользователю нужно еще знать регекспы).
- Еще разок:

        #!bash
        find -name "SICP*" -type f -exec evince '{}' \;

  Заработало, только вот команду надо запускать *ВСЕГДА* 2 раза: если
  в первый раз найдется 2000 файлов, то это будет кромешный
  пиздец. Опечатки в команде приведут к еще более кромешному — можно
  тупо просрать все свои файлы. Откатить будет невозможно — в UNIX'е
  нет корзиныу. Find ищет по всей домашней директории, и если у меня
  2 Тб всякого говна на винте я представляю, сколько времени она будет
  искать.

Итого, прошло около 12 минут. 12 минут чтобы почитать книжку — это
нечто запредельное (боюсь, не освоившийся в консоли пользователь
потратит на это куда больше времени). И это с учетом того, что нужно
знать иностранный язык, чтобы прочесть мануал. И разбираться в
тонкостях запуска команд в консоли.

### Chrome

Как эта задача решается в хроме.

1. Открываем хром. 
2. Открываем новую вкладку. 
3. Печатаем SICP. Хром выдает список с вариантом SICP PDF. 2 раза вниз, 1 Enter. 
4. 4ый результат — то что надо. 
5. Тык. 
6. Наслаждаемся. 

Окей, это заняло около ~20 секунд. Никаких чтений мануалов. Пишешь что
надо — получаешь что надо. Это — командный интерфейс для людей.

## Разделение не оправдано

А теперь у меня возникает вопрос. Если и адресная строка хрома и
юниксовая консоль — командные интерфейсы, то почему я должен тратить
столько времени, пользуясь юниксовой консолью, чтобы почитать книжку?
Если я в десятки раз быстрее сделаю то же самое в хроме.

Консоль, в том виде в котором она есть в Linux не так хороша как могла
бы быть. Более чем реально сделать её в разы более удобной, полезной,
простой, понятной и безопасной. Не стоит зацикливаться на древних, как
говно мамонта, методах (классический UNIX-вэй) — будущее за
интегрированными системами, совмещающими в себе плюсы всех подходов.

# Интегрированные системы

Людям, сведущим в технике, нравятся интегрированные системы (оставим в
стороне тех, кому нравится *интегрировать* системы — привет,
пользователи Gentoo (или, прости хосподи, LFS)). Им нравятся
минималистичные системы (оставим в стороне программистов на C++ под
Windows).

Я могу назвать несколько таких систем.

## Chrome

Образцово-показательная минималистичная интегрированная
система. Будущая Chrome OS тому подтверждение.

## Лисп

Лисп — простой, минималистичный язык программирования, в который с
завидной легкостью интегрируются любой другой язык
программирования. За это его и любят.

## Emacs

Emacs — минималистичный? Не смеши меня! — Скажут мне некоторые. Ну или
почти все.

Нет, на самом деле Emacs — минималистичный. У него небольшое ядро, а
все его модули расширения (тысячи их) написаны на лиспе. Другое дело,
что эмакс используется уже несколько десятилетий, и область его
применения столь широка, что сравнить её можно, разве что с Chrome OS
— потому он довольно большой. Интегрированности эмакса может
позавидовать любая другая система, кроме, разве что

## Lisp Machine

Эмакс некогда был лишь частью лисп-машины, наверное, самой
интегрированной системы за всю компьютерную историю. Что и говорить,
лисп-машины нравились программистам. Больше, чем им нравится сейчас UNIX.
